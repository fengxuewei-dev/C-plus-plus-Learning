#include <iostream>

using namespace std;

/*
    异常机制：
    1、什么是异常呢？
        程序出现一些非正常的执行问题
    2、如果程序出现了异常，但是没有被捕获，程序就会终止；
        整形返回值没有任何语义信息，但是异常却包含了语义信息，可以通过抛出异常对象，来进行指定.
        整形返回值缺乏上下文的信息，但是异常可以抛出一个类，可以拥有自己的成员，这些成员可以传递足够的信息
*/

int divide(int x, int y){
    if(y == 0){
        throw y;    // 将 y 的值抛出
    }

    return x/y;
}

void CallDivide(int x, int y){
    divide(x, y);
}
 
void test01();
void test02();
void test03();

int main(void){
    test03();
    return 0;
}

void test03(){
    try
    {
        CallDivide(10, 0); // 内部调用的 divide 函数出现了异常，向上抛出一个异常，但是在 CallDivide 函数中，没有捕获这个异常，那么异常会继续往上一层抛, 那么当异常抛到最顶层的时候，依然没有捕获异常的程序，那么程序会挂掉 调用 terminate() 函数，终止程序的执行

        // C++的异常是 跨函数的，同时也是需要必须处理的 比C语言强的地方
    }
    catch(int e)
    {
        cout << "除数为：" << e <<endl;
    }
    
}
void test02(){
    try{ // 试着捕获这个块中所有代码抛出的异常
        divide(10,0); // 这个函数调用的时候，可能会发生异常，将他们放在 try 块儿中，程序就会进行捕获这个异常
        // 如果这个函数执行抛出了一个异常，try就会捕捉到；如果没有，程序正常执行即可
    } // 这里抛出一个对象，下面使用对象的类型将其捕获
    catch(int e){ // 抓住异常，进行处理 异常是根据类型进行匹配。在函数调用中，我们将y进行 throw ，而y 的类型是 int 类型，所以catch后面的是 int 类型
        cout << "除数为" << e << endl;
    }
}

void test01(){
    try{ // 试着捕获这个块中所有代码抛出的异常
        divide(10,1); // 这个函数调用的时候，可能会发生异常，将他们放在 try 块儿中，程序就会进行捕获这个异常
        // 如果这个函数执行抛出了一个异常，try就会捕捉到；如果没有，程序正常执行即可
    }
    catch(int){ // 抓住异常，进行处理 异常是根据类型进行匹配。在函数调用中，我们将y进行 throw ，而y 的类型是 int 类型，所以catch后面的是 int 类型
        cout << "除数为0" << endl;
    }
}